from flask import Flask, request, jsonify
from feature_extractor import Feature_Extraction_img
import joblib
import os
from werkzeug.utils import secure_filename
import tempfile
import numpy as np


app = Flask(__name__)

svm_model = joblib.load('train/model.pkl')

@app.route("/")
def home():
    return "model is running!"

@app.route("/predict", methods=["POST"])
def predict():
    try:
        print("ƒêang x·ª≠ l√Ω y√™u c·∫ßu...")
        if "image" not in request.files:
            return jsonify({"error": "No image uploaded"}), 400

        img_file = request.files["image"]
        if img_file.filename == "":
            return jsonify({"error": "Empty filename"}), 400

        print(f"ƒê√£ nh·∫≠n t·ªáp ·∫£nh: {img_file.filename}")

        # L∆∞u ·∫£nh v√†o th∆∞ m·ª•c t·∫°m th·ªùi
        temp_dir = "./temp"  # Th∆∞ m·ª•c t·∫°m
        img_filename = secure_filename(img_file.filename)
        temp_file_path = os.path.join(temp_dir, img_filename)  # L∆∞u ·∫£nh t·∫°i temp_dir

        img_file.save(temp_file_path)
        print(f"ƒê√£ l∆∞u ·∫£nh t·∫°m th·ªùi t·∫°i: {temp_file_path}")

        # Feature extraction
        features = Feature_Extraction_img(temp_file_path)
        print(f"ƒê·∫∑c tr∆∞ng ƒë√£ tr√≠ch xu·∫•t: {features}")
        # Predict
        prediction = svm_model.predict(features)
        print(f"D·ª± ƒëo√°n: {prediction}")

        # X√≥a t·ªáp t·∫°m
        os.remove(temp_file_path)

        return jsonify({"prediction": int(prediction[0])})

    except Exception as e:
        print("üî• Error during prediction:", str(e))  # In ra l·ªói chi ti·∫øt
        return jsonify({"error": "Internal Server Error"}), 500
    
if __name__ == "__main__":
    from waitress import serve
    serve(app, host="0.0.0.0", port=8080)